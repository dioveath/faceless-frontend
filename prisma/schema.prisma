// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("NEXT_PUBLIC_DATABASE_URL")
  directUrl = env("NEXT_PUBLIC_DIRECT_URL")
}

model users {
  id              String          @id @default(uuid()) @db.Uuid
  email           String          @unique
  account_status  String          @default("active") // active, suspended, canceled
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  billing_address Json?
  customer        customers? // Relation to customer
  subscriptions   subscriptions[] // Relation to subscriptions
  usage_data      usage_data[] // Relation to usage data
  notifications   notifications[] // Relation to notifications
}

model customers {
  id                 String   @unique @db.Uuid
  user               users    @relation(fields: [id], references: [id], onDelete: Cascade)
  stripe_customer_id String   @unique // Stripe Customer ID
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
}

model products {
  id          String   @id // Stripe Product ID
  name        String
  description String?
  active      Boolean
  image       String?
  metadata    Json?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  prices      prices[] // Relation to prices
}

model prices {
  id                String          @id // Stripe Price ID
  product_id        String
  product           products        @relation(fields: [product_id], references: [id], onDelete: Cascade)
  currency          String
  unit_amount       Float? // Stored in smallest currency unit (e.g., cents)
  interval          String? // month, year
  interval_count    Int? // How many intervals between charges
  type              String // recurring, one_time
  active            Boolean
  trial_period_days Int?
  metadata          Json?
  created_at        DateTime        @default(now())
  subscriptions     subscriptions[] // Relation to subscriptions
}

model subscriptions {
  id                   String       @id // Stripe Subscription ID
  user_id              String       @db.Uuid
  user                 users        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  price_id             String
  price                prices       @relation(fields: [price_id], references: [id], onDelete: Cascade)
  status               String // active, trialing, past_due, canceled
  cancel_at            DateTime? // A date in the future at which the subscription will automatically get canceled
  cancel_at_period_end Boolean // Indicates whether the subscription will cancel at the end of the current period
  canceled_at          DateTime? // Date the subscription was canceled
  cancellation_details Json?
  trial_start          DateTime?
  trial_end            DateTime?
  current_period_start DateTime
  current_period_end   DateTime
  ended_at             DateTime?
  created_at           DateTime     @default(now())
  updated_at           DateTime     @updatedAt
  usage_data           usage_data[] // Relation to usage data
  metadata             Json?
}

model usage_data {
  id                  Int           @id @default(autoincrement())
  user_id             String        @db.Uuid
  user                users         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  subscription_id     String
  subscription        subscriptions @relation(fields: [subscription_id], references: [id], onDelete: Cascade)
  metric_name         String // video_minutes, characters, etc.
  usage_amount        Float         @default(0.0)
  limit_amount        Float?
  billing_cycle_start DateTime
  billing_cycle_end   DateTime
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt

  @@unique([subscription_id, metric_name])
}

model webhook_logs {
  id          Int      @id @default(autoincrement())
  event_id    String   @unique // Stripe Event ID
  event_type  String
  event_data  Json // Full payload from Stripe
  processed   Boolean  @default(false)
  received_at DateTime @default(now())
}

model notifications {
  id         Int      @id @default(autoincrement())
  user_id    String   @db.Uuid
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  type       String // payment_failed, subscription_updated, etc.
  message    String
  sent_at    DateTime @default(now())
  created_at DateTime @default(now())
}
